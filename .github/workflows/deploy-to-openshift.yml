# .github/workflows/deploy-to-openshift.yml

name: CD â†’ OpenShift via Helm

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      PROJECT:      danwinga-dev
      NAMESPACE:    danwinga-dev
      SECRET_NAME:  si-backend-secret
      CHART_KEYC:   helm/keycloak
      CHART_API:    helm/si-backend-api
      CHART_WORKER: helm/si-notifications-worker
      IMAGE_REPO:   ghcr.io/danwinga/si-backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine IMAGE_TAG (commit SHA)
        run: echo "IMAGE_TAG=${GITHUB_SHA}" >> $GITHUB_ENV

      - name: Install oc CLI
        run: |
          curl -L https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz \
            | tar -xz oc
          sudo mv oc /usr/local/bin/

      - name: Login to OpenShift
        run: |
          oc login ${{ secrets.OPENSHIFT_SERVER }} \
            --token="${{ secrets.OPENSHIFT_TOKEN }}" \
            --insecure-skip-tls-verify
          oc project ${PROJECT}

      - name: Create/Update si-backend-secret
        run: |
          oc apply -f - <<EOF
          apiVersion: v1
          kind: Secret
          metadata:
            name: ${SECRET_NAME}
            namespace: ${NAMESPACE}
          type: Opaque
          stringData:
            SECRET_KEY:            "${{ secrets.SECRET_KEY }}"
            DEBUG:                 "False"
            ALLOWED_HOSTS:         "*"
            DATABASE_URL:          "postgres://postgres:postgres@si-postgres-postgresql:5432/postgres"
            RABBITMQ_URL:          "amqp://guest:guest@si-rabbitmq:5672/"
            BROKER_URL:            "amqp://guest:guest@si-rabbitmq:5672/"
            CELERY_BROKER_URL:     "amqp://guest:guest@si-rabbitmq:5672/"
            AFRICAS_TALKING_USERNAME: "${{ secrets.AFRICAS_TALKING_USERNAME }}"
            AFRICAS_TALKING_API_KEY:  "${{ secrets.AFRICAS_TALKING_API_KEY }}"
            EMAIL_HOST:            "${{ secrets.EMAIL_HOST }}"
            EMAIL_PORT:            "${{ secrets.EMAIL_PORT }}"
            EMAIL_HOST_USER:       "${{ secrets.EMAIL_HOST_USER }}"
            EMAIL_HOST_PASSWORD:   "${{ secrets.EMAIL_HOST_PASSWORD }}"
            ADMIN_EMAIL:           "${{ secrets.ADMIN_EMAIL }}"
            # OIDC / Keycloak
            OIDC_OP_ISSUER:        "${{ secrets.OIDC_OP_ISSUER }}"
            OIDC_RP_CLIENT_ID:     "${{ secrets.OIDC_RP_CLIENT_ID }}"
            OIDC_RP_CLIENT_SECRET: "${{ secrets.OIDC_RP_CLIENT_SECRET }}"
          EOF

      - name: Create/Update keycloak-realm ConfigMap
        run: |
          oc create configmap keycloak-realm \
            --from-file=realm.json=keycloak/realm-export.json \
            --namespace=${NAMESPACE} \
            --dry-run=client -o yaml \
          | oc apply -f -

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Add Bitnami repo & update
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update

      - name: Update Keycloak chart dependencies
        run: helm dependency update ${CHART_KEYC}

      - name: Deploy/Upgrade Keycloak chart
        run: |
          helm upgrade --install si-keycloak ${CHART_KEYC} \
            --namespace ${NAMESPACE} \
            --set keycloak.auth.adminUser=${{ secrets.KC_ADMIN_USER }} \
            --set keycloak.auth.adminPassword=${{ secrets.KC_ADMIN_PASSWORD }} \
            --set keycloak.postgresql.enabled=true

      - name: Cleanup old migrate job
        run: |
          oc delete job migrate-${{ github.run_id }} -n ${NAMESPACE} --ignore-not-found

      - name: Run Django migrations via Job
        run: |
          cat <<EOF | oc apply -f -
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: migrate-${{ github.run_id }}
            namespace: ${NAMESPACE}
          spec:
            backoffLimit: 1
            template:
              spec:
                containers:
                  - name: migrate
                    image: ${IMAGE_REPO}:${IMAGE_TAG}
                    envFrom:
                      - secretRef:
                          name: ${SECRET_NAME}
                    command: ["python","manage.py","migrate","--noinput"]
                restartPolicy: OnFailure
          EOF
          oc wait job migrate-${{ github.run_id }} -n ${NAMESPACE} --for=condition=complete --timeout=120s

      - name: Deploy/Upgrade API chart
        run: |
          helm upgrade --install si-api ${CHART_API} \
            --namespace ${NAMESPACE} \
            --set image.repository=${IMAGE_REPO} \
            --set image.tag=${IMAGE_TAG} \
            --set secretName=${SECRET_NAME}

      - name: Deploy/Upgrade Worker chart
        run: |
          helm upgrade --install si-worker ${CHART_WORKER} \
            --namespace ${NAMESPACE} \
            --set image.repository=${IMAGE_REPO} \
            --set image.tag=${IMAGE_TAG} \
            --set secretName=${SECRET_NAME}

      - name: Wait for rollout
        run: |
          oc rollout status deployment/si-keycloak -n ${NAMESPACE} --timeout=2m
          oc rollout status deployment/si-api      -n ${NAMESPACE} --timeout=2m
          oc rollout status deployment/si-worker   -n ${NAMESPACE} --timeout=2m