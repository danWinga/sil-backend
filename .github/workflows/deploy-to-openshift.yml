# .github/workflows/deploy-to-openshift.yml

name: CD â†’ OpenShift via Helm

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      PROJECT:      danwinga-dev
      NAMESPACE:    danwinga-dev
      SECRET_NAME:  si-backend-secret
      IMAGE_REPO:   ghcr.io/${{ github.repository_owner }}/si-backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine IMAGE_TAG (commit SHA)
        run: echo "IMAGE_TAG=${GITHUB_SHA}" >> $GITHUB_ENV

      - name: Install oc CLI
        run: |
          curl -L https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz \
            | tar -xz oc
          sudo mv oc /usr/local/bin/

      - name: Login to OpenShift
        run: |
          oc login ${{ secrets.OPENSHIFT_SERVER }} \
            --token="${{ secrets.OPENSHIFT_TOKEN }}" \
            --insecure-skip-tls-verify
          oc project ${PROJECT}

      - name: Create/Update si-backend-secret
        run: |
          oc apply -f - <<EOF
          apiVersion: v1
          kind: Secret
          metadata:
            name: ${SECRET_NAME}
            namespace: ${NAMESPACE}
          type: Opaque
          stringData:
            SECRET_KEY:            "${{ secrets.SECRET_KEY }}"
            DEBUG:                 "False"
            ALLOWED_HOSTS:         "*"
            DATABASE_URL:          "${{ secrets.DATABASE_URL }}"
            RABBITMQ_URL:          "${{ secrets.RABBITMQ_URL }}"
            BROKER_URL:            "${{ secrets.RABBITMQ_URL }}"
            CELERY_BROKER_URL:     "${{ secrets.RABBITMQ_URL }}"
            AFRICAS_TALKING_USERNAME: "${{ secrets.AFRICAS_TALKING_USERNAME }}"
            AFRICAS_TALKING_API_KEY:  "${{ secrets.AFRICAS_TALKING_API_KEY }}"
            EMAIL_HOST:            "${{ secrets.EMAIL_HOST }}"
            EMAIL_PORT:            "${{ secrets.EMAIL_PORT }}"
            EMAIL_HOST_USER:       "${{ secrets.EMAIL_HOST_USER }}"
            EMAIL_HOST_PASSWORD:   "${{ secrets.EMAIL_HOST_PASSWORD }}"
            ADMIN_EMAIL:           "${{ secrets.ADMIN_EMAIL }}"
            OIDC_OP_ISSUER:        "${{ secrets.OIDC_OP_ISSUER }}"
            OIDC_RP_CLIENT_ID:     "${{ secrets.OIDC_RP_CLIENT_ID }}"
            OIDC_RP_CLIENT_SECRET: "${{ secrets.OIDC_RP_CLIENT_SECRET }}"
          EOF

      - name: Create/Update keycloak-realm ConfigMap
        run: |
          oc create configmap keycloak-realm \
            --from-file=realm.json=keycloak/realm-export.json \
            --namespace=${NAMESPACE} \
            --dry-run=client -o yaml \
          | oc apply -f -

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Add Bitnami repo & update
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update

      - name: Deploy/Upgrade Postgres
        run: |
          helm upgrade --install si-postgres bitnami/postgresql \
            --namespace ${NAMESPACE} \
            --set global.postgresql.auth.postgresPassword=postgres \
            --set global.postgresql.auth.username=postgres \
            --set global.postgresql.auth.database=postgres

      - name: Deploy/Upgrade RabbitMQ
        run: |
          helm upgrade --install si-rabbitmq bitnami/rabbitmq \
            --namespace ${NAMESPACE} \
            --set auth.username=guest \
            --set auth.password=guest

      - name: Deploy/Upgrade Keycloak (Bitnami chart)
        run: |
          helm upgrade --install si-keycloak bitnami/keycloak \
            --namespace ${NAMESPACE} \
            --set auth.adminUser=${{ secrets.KC_ADMIN_USER }} \
            --set auth.adminPassword=${{ secrets.KC_ADMIN_PASSWORD }} \
            --set-string extraEnvVars[0].name=KC_IMPORT \
            --set-string extraEnvVars[0].value=/tmp/realm.json \
            --set-string extraEnvVars[1].name=KC_HEALTH_ENABLED \
            --set-string extraEnvVars[1].value=true \
            --set-string extraEnvVars[2].name=KC_METRICS_ENABLED \
            --set-string extraEnvVars[2].value=true \
            --set postgresql.enabled=true \
            --set persistence.enabled=false \
            --set ingress.enabled=false \
            --set service.type=ClusterIP \
            --set service.port=8080 \
            --set extraVolumes[0].name=realm-json \
            --set extraVolumes[0].configMap.name=keycloak-realm \
            --set extraVolumeMounts[0].name=realm-json \
            --set extraVolumeMounts[0].mountPath=/tmp/realm.json

      - name: Wait for Keycloak rollout
        run: oc rollout status deployment/si-keycloak -n ${NAMESPACE} --timeout=2m

      - name: Run Django migrations via Job
        run: |
          oc delete job migrate-${{ github.run_id }} -n ${NAMESPACE} --ignore-not-found
          cat <<EOF | oc apply -f -
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: migrate-${{ github.run_id }}
            namespace: ${NAMESPACE}
          spec:
            backoffLimit: 1
            template:
              spec:
                containers:
                  - name: migrate
                    image: ${IMAGE_REPO}:${IMAGE_TAG}
                    envFrom:
                      - secretRef: { name: ${SECRET_NAME} }
                    command: ["python","manage.py","migrate","--noinput"]
                restartPolicy: OnFailure
          EOF
          oc wait job migrate-${{ github.run_id }} -n ${NAMESPACE} --for=condition=complete --timeout=120s

      - name: Deploy/Upgrade API chart
        run: |
          helm upgrade --install si-api helm/si-backend-api \
            --namespace ${NAMESPACE} \
            --set image.repository=${IMAGE_REPO} \
            --set image.tag=${IMAGE_TAG} \
            --set secretName=${SECRET_NAME}

      - name: Deploy/Upgrade Worker chart
        run: |
          helm upgrade --install si-worker helm/si-notifications-worker \
            --namespace ${NAMESPACE} \
            --set image.repository=${IMAGE_REPO} \
            --set image.tag=${IMAGE_TAG} \
            --set secretName=${SECRET_NAME}

      - name: Wait for API & Worker rollouts
        run: |
          oc rollout status deployment/si-api    -n ${NAMESPACE} --timeout=2m
          oc rollout status deployment/si-worker -n ${NAMESPACE} --timeout=2m