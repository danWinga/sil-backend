# .github/workflows/deploy-to-openshift.yml

name: CD → OpenShift via Helm

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  PROJECT: danwinga-dev
  NAMESPACE: danwinga-dev
  SECRET_NAME: si-backend-secret
  CHART_API: helm/si-backend-api
  CHART_WORKER: helm/si-notifications-worker
  IMAGE_REPO: ghcr.io/danwinga/si-backend
  IMAGE_TAG: latest

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install oc CLI
        run: |
          curl -L https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz \
            | tar -xz oc
          sudo mv oc /usr/local/bin/

      - name: Login to OpenShift
        run: |
          oc login ${{ secrets.OPENSHIFT_SERVER }} \
            --token="${{ secrets.OPENSHIFT_TOKEN }}" \
            --insecure-skip-tls-verify
          oc project $PROJECT

      - name: Create/Update Kubernetes Secret
        run: |
          oc apply -f - <<EOF
          apiVersion: v1
          kind: Secret
          metadata:
            name: $SECRET_NAME
            namespace: $NAMESPACE
          type: Opaque
          stringData:
            # Django settings
            SECRET_KEY:              "${{ secrets.SECRET_KEY }}"
            DEBUG:                   "False"
            # Allow both the API host and the Keycloak host
            ALLOWED_HOSTS: "si-api-danwinga-dev.apps.rm3.7wse.p1.openshiftapps.com"
            CSRF_TRUSTED_ORIGINS: "https://si-api-danwinga-dev.apps.rm3.7wse.p1.openshiftapps.com"
            
            #ALLOWED_HOSTS:         "si-api-danwinga-dev.apps.rm3.7wse.p1.openshiftapps.com,si-keycloak-danwinga-dev.apps.rm3.7wse.p1.openshiftapps.com"
            # CSRF must trust both endpoints that issue/accept cookies
            #CSRF_TRUSTED_ORIGINS:  "https://si-api-danwinga-dev.apps.rm3.7wse.p1.openshiftapps.com,https://si-keycloak-danwinga-dev.apps.rm3.7wse.p1.openshiftapps.com"

            ## PostgreSQL (Bitnami chart)
            DATABASE_URL:            "postgres://postgres:postgres@si-postgres-postgresql:5432/postgres"

            # RabbitMQ (Bitnami chart)
            RABBITMQ_URL:            "amqp://guest:guest@si-rabbitmq:5672/"
            BROKER_URL:              "amqp://guest:guest@si-rabbitmq:5672/"
            CELERY_BROKER_URL:       "amqp://guest:guest@si-rabbitmq:5672/"

            # Keycloak OIDC settings
            OIDC_OP_ISSUER:          "https://si-keycloak-danwinga-dev.apps.rm3.7wse.p1.openshiftapps.com/realms/si"
            OIDC_RP_CLIENT_ID:       "si-backend"
            OIDC_RP_CLIENT_SECRET:   "supersecret"

            ## Africa’s Talking SMS
            AFRICAS_TALKING_USERNAME: "${{ secrets.AFRICAS_TALKING_USERNAME }}"
            AFRICAS_TALKING_API_KEY:  "${{ secrets.AFRICAS_TALKING_API_KEY }}"
            AFRICAS_TALKING_SENDER_ID : "10095"

            # SMTP email
            EMAIL_HOST:              "${{ secrets.EMAIL_HOST }}"
            EMAIL_PORT:              "${{ secrets.EMAIL_PORT }}"
            EMAIL_HOST_USER:         "${{ secrets.EMAIL_HOST_USER }}"
            EMAIL_HOST_PASSWORD:     "${{ secrets.EMAIL_HOST_PASSWORD }}"
            ADMIN_EMAIL:             "${{ secrets.ADMIN_EMAIL }}"
            DEFAULT_FROM_EMAIL:      "danwinga@gmail.com"
          EOF

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Add Bitnami repo & update
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update

      - name: Deploy/Upgrade API chart
        run: |
          helm upgrade --install si-api $CHART_API \
            --namespace $NAMESPACE \
            --set image.repository=$IMAGE_REPO \
            --set image.tag=$IMAGE_TAG \
            --set secretName=$SECRET_NAME \
            --wait

      - name: Deploy/Upgrade Worker chart
        run: |
          helm upgrade --install si-worker $CHART_WORKER \
            --namespace $NAMESPACE \
            --set image.repository=$IMAGE_REPO \
            --set image.tag=$IMAGE_TAG \
            --set secretName=$SECRET_NAME \
            --wait

      - name: Wait for rollout
        run: |
          oc rollout status deployment/si-api   -n $NAMESPACE --timeout=2m
          oc rollout status deployment/si-worker -n $NAMESPACE --timeout=2m