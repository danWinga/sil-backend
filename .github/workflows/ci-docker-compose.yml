name: CI via Docker Compose, Publish & Static Docs

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: si-backend

jobs:
  test-and-docs:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js for static docs
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Create .env from GitHub Secrets
        run: |
          cat > .env <<EOF
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          DEBUG=True
          ALLOWED_HOSTS=localhost,127.0.0.1

          DATABASE_URL=${{ secrets.DATABASE_URL }}
          RABBITMQ_URL=${{ secrets.RABBITMQ_URL }}

          OIDC_RP_CLIENT_ID=si-backend
          OIDC_RP_CLIENT_SECRET=${{ secrets.OIDC_RP_CLIENT_SECRET }}
          OIDC_OP_ISSUER=${{ secrets.OIDC_OP_ISSUER }}

          AFRICAS_TALKING_API_KEY=${{ secrets.AFRICAS_TALKING_API_KEY }}
          AFRICAS_TALKING_USERNAME=${{ secrets.AFRICAS_TALKING_USERNAME }}

          EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
          EMAIL_HOST=${{ secrets.EMAIL_HOST }}
          EMAIL_PORT=${{ secrets.EMAIL_PORT }}
          EMAIL_USE_TLS=True
          EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}
          DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}
          ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
          EOF

      - name: Build & bring up Postgres+RabbitMQ
        run: |
          docker compose build
          docker compose up -d postgres rabbitmq

      - name: Wait for Postgres
        run: |
          until docker compose exec -T postgres pg_isready -U postgres; do
            echo "Waiting for Postgres…"
            sleep 1
          done

      - name: Wait for RabbitMQ
        run: |
          until docker compose exec -T rabbitmq rabbitmqctl status; do
            echo "Waiting for RabbitMQ…"
            sleep 1
          done

      - name: Run migrations & tests
        run: |
          docker compose run --rm web python manage.py migrate --noinput
          docker compose run --rm web pytest --maxfail=1 --disable-warnings -q --cov=.

      - name: Tear down Docker Compose
        if: always()
        run: docker compose down --volumes --remove-orphans

      # ---- Static API docs generation ----

      - name: Generate OpenAPI JSON
        # redirect stdout out of the container into openapi.json on the host
        run: docker compose run --rm web python manage.py spectacular --file - > openapi.json

      - name: Bundle ReDoc static HTML (via npx)
        run: |
          mkdir -p docs
          npx @redocly/cli@latest bundle openapi.json \
            -o docs/redoc.html

      - name: Generate Swagger UI static files
        run: |
          mkdir -p docs/swagger
          npm install swagger-ui-dist@latest
          cp node_modules/swagger-ui-dist/swagger-ui.css docs/swagger/
          cp node_modules/swagger-ui-dist/swagger-ui-bundle.js docs/swagger/
          cp node_modules/swagger-ui-dist/swagger-ui-standalone-preset.js docs/swagger/
          cat > docs/swagger/index.html <<'EOF'
          <!DOCTYPE html>
          <html>
            <head>
              <meta charset="UTF-8" />
              <title>SI Backend Swagger UI</title>
              <link rel="stylesheet" href="./swagger-ui.css" />
            </head>
            <body>
              <div id="swagger-ui"></div>
              <script src="./swagger-ui-bundle.js"></script>
              <script src="./swagger-ui-standalone-preset.js"></script>
              <script>
                window.onload = () => {
                  SwaggerUIBundle({
                    url: "/openapi.json",
                    dom_id: "#swagger-ui",
                    presets: [
                      SwaggerUIBundle.presets.apis,
                      SwaggerUIStandalonePreset
                    ],
                  });
                };
              </script>
            </body>
          </html>
          EOF

      - name: Commit & deploy docs to gh-pages
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout --orphan gh-pages
          git reset --hard
          cp openapi.json docs/
          git add openapi.json docs/
          git commit -m "ci: update static API docs"
          git push -f origin gh-pages

  publish:
    needs: test-and-docs
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lowercase owner
        run: echo "OWNER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build & push image to GHCR
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:latest
            ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}