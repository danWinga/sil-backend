name: CI via Docker Compose & Publish

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # used by Helm charts & publish step
  REPO_OWNER: ${{ github.repository_owner }}
  IMAGE_NAME: si-backend

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env from GitHub Secrets
        run: |
          cat > .env <<EOF
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          DEBUG=True
          ALLOWED_HOSTS=localhost,127.0.0.1

          DATABASE_URL=${{ secrets.DATABASE_URL }}
          RABBITMQ_URL=${{ secrets.RABBITMQ_URL }}

          OIDC_RP_CLIENT_ID=si-backend
          OIDC_RP_CLIENT_SECRET=${{ secrets.OIDC_RP_CLIENT_SECRET }}
          OIDC_OP_ISSUER=${{ secrets.OIDC_OP_ISSUER }}

          AFRICAS_TALKING_API_KEY=${{ secrets.AFRICAS_TALKING_API_KEY }}
          AFRICAS_TALKING_USERNAME=${{ secrets.AFRICAS_TALKING_USERNAME }}

          EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
          EMAIL_HOST=${{ secrets.EMAIL_HOST }}
          EMAIL_PORT=${{ secrets.EMAIL_PORT }}
          EMAIL_USE_TLS=True
          EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}
          DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}
          ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
          EOF

      - name: Build Docker Compose images
        run: docker compose build

      - name: Bring up Postgres & RabbitMQ
        run: docker compose up -d postgres rabbitmq

      - name: Wait for Postgres
        run: |
          until docker compose exec -T postgres pg_isready -U postgres; do
            echo "Waiting for Postgres…"
            sleep 1
          done

      - name: Wait for RabbitMQ
        run: |
          until docker compose exec -T rabbitmq rabbitmqctl status; do
            echo "Waiting for RabbitMQ…"
            sleep 1
          done

      - name: Run Django migrations
        run: docker compose run --rm web python manage.py migrate --noinput

      - name: Run test suite
        run: docker compose run --rm web pytest --maxfail=1 --disable-warnings -q --cov=.

      - name: Tear down Docker Compose
        if: always()
        run: docker compose down --volumes --remove-orphans

  publish:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image to GHCR
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ghcr.io/${{ env.REPO_OWNER }}/${{ env.IMAGE_NAME }}:latest
            ghcr.io/${{ env.REPO_OWNER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}