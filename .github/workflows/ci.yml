# .github/workflows/ci.yml

name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    # Start Postgres & RabbitMQ for integration-style tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB:       postgres
          POSTGRES_USER:     postgres
          POSTGRES_PASSWORD: postgres
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      rabbitmq:
        image: rabbitmq:3-management
        ports: ["5672:5672","15672:15672"]
        options: >-
          --health-cmd="rabbitmqctl status"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    # Ensure Django & pytest know where your settings live
    env:
      DJANGO_SETTINGS_MODULE: config.settings
      PYTHONPATH:             ${{ github.workspace }}
      DATABASE_URL:           postgres://postgres:postgres@localhost:5432/postgres
      RABBITMQ_URL:           amqp://guest:guest@localhost:5672/
      DEBUG:                  "True"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Install dependencies
        run: |
          # include dev dependencies for testing & linting
          poetry install --no-interaction --no-ansi --with dev

      - name: Install lint tools
        run: |
          poetry run pip install black isort flake8

      - name: Lint with Black
        run: |
          poetry run black --check .

      - name: Lint imports with isort
        run: |
          poetry run isort --check-only .

      - name: Lint with flake8
        run: |
          poetry run flake8 .

      - name: Run tests with coverage
        run: |
          poetry run pytest --maxfail=1 --disable-warnings -q --cov=.

      - name: Upload coverage to Codecov
        if: github.event_name == 'push'
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true